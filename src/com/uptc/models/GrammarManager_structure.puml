@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "models.GrammarManager",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1068799382 { 
   	label=models
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   AxiomSimbol1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AxiomSimbol</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   simbol: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GeneralNode1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GeneralNode</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   childrenSimbol: ArrayList&lt;GeneralNode&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   simbol: Simbol [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addChild(child: GeneralNode)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Grammar1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Grammar</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   axiomSimbol: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   grammarName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   noTerminalSimbols: ArrayList&lt;String&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   productions: ArrayList&lt;Production&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   terminalSimbols: ArrayList&lt;String&gt; [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GrammarManager1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GrammarManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   checker: WordChecker [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   generalRoot: GeneralNode [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   grammar: Grammar [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   terminalChains: ArrayList&lt;String&gt; [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addBranch(father: GeneralNode, level: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- addWordsToFather(father: GeneralNode, simbols: String, i: int, simbol: char)</TD></TR>
<TR><TD ALIGN="LEFT" >+ changeToList(list: String[]): ArrayList&lt;String&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ checkWord(word: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ createGrammar(grammarName: String, noTerminalSimbols: String[], terminalSimbols: String[], axiomSimbol: String, productions: ArrayList&lt;Production&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ createGrammar(grammar: Grammar)</TD></TR>
<TR><TD ALIGN="LEFT" >- formatWord(simbols: String, production: String, simbolPosition: int): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ generateGeneralTree()</TD></TR>
<TR><TD ALIGN="LEFT" >- isNoTerminal(character: char): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- isTerminal(character: char): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ print()</TD></TR>
<TR><TD ALIGN="LEFT" >+ printNode(node: GeneralNode, level: int, fatherId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ printTree()</TD></TR>
<TR><TD ALIGN="LEFT" >+ searchProduction(noTerminalSimbol: String): ArrayList&lt;String&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ searchProductionsGrammar(noTerminalSimbol: String): ArrayList&lt;Production&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- searchWordInLeafs(word: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ validateWordRestart(father: GeneralNode, level: int, levelMax: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

NoTerminalSimbol1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)NoTerminalSimbol</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   simbol: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Production1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Production</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   noTerminalSimbol: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   production: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TerminalSimbol1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TerminalSimbol</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   simbol: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

WordChecker1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WordChecker</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   grammar: Grammar [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- getNonTerminalProductions(symbol: String, productions: ArrayList&lt;Production&gt;): Production</TD></TR>
<TR><TD ALIGN="LEFT" >- getProductions(nonTerminalSymbol: String): ArrayList&lt;Production&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- getTerminalProduction(symbol: String, productions: ArrayList&lt;Production&gt;): Production</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

WordSimbol1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WordSimbol</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   simbol: String [0..1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1714548649 { 
   	label=controllers
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Controller1714548649[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Controller</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   frame: PrincipalFrame [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   manager: GrammarManager [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   persistence: Persistence [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   productionsDialog: ProductionsDialog [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ actionPerformed(e: ActionEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >- createAndAddGrammar()</TD></TR>
<TR><TD ALIGN="LEFT" >- deleteParameters()</TD></TR>
<TR><TD ALIGN="LEFT" >- editParameters()</TD></TR>
<TR><TD ALIGN="LEFT" >- loadGrammar()</TD></TR>
<TR><TD ALIGN="LEFT" >+ main(args: String[])</TD></TR>
<TR><TD ALIGN="LEFT" >- saveGrammar()</TD></TR>
<TR><TD ALIGN="LEFT" >- validateWordOnGrammar()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Controller1714548649 -> GrammarManager1068799382[label="manager
[0..1]"];
Grammar1068799382 -> Production1068799382[label="productions
[0..1]"];
GrammarManager1068799382 -> AxiomSimbol1068799382[arrowhead=none];
GrammarManager1068799382 -> GeneralNode1068799382[label="generalRoot
[0..1]"];
GrammarManager1068799382 -> Grammar1068799382[label="grammar
[0..1]"];
GrammarManager1068799382 -> NoTerminalSimbol1068799382[arrowhead=none];
GrammarManager1068799382 -> TerminalSimbol1068799382[arrowhead=none];
GrammarManager1068799382 -> WordChecker1068799382[label="checker
[0..1]"];
GrammarManager1068799382 -> WordSimbol1068799382[arrowhead=none];
WordChecker1068799382 -> Grammar1068799382[label="grammar
[0..1]"];
    
}
@enduml